#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include <std_msgs/Int32MultiArray.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/highgui/highgui.hpp>
#include<opencv2/core/core.hpp>
#include<opencv2/contrib/contrib.hpp>

static const std::string OPENCV_WINDOW = "Image window";

class ImageConverter
{
	ros::NodeHandle nh_;
	image_transport::ImageTransport it_;
	image_transport::Subscriber image_sub_;
	ros::Subscriber face_data_sub_;
	image_transport::Publisher image_pub_;
	cv::Mat img;
	std::vector<int> face_coord;
public:
	ImageConverter()
: it_(nh_)
{
		// Subscrive to input video feed and publish output video feed
		image_sub_ = it_.subscribe("/camera/image_raw", 1, &ImageConverter::imageCb, this);

		face_data_sub_ = nh_.subscribe("/faceCoord", 1, &ImageConverter::getFaceCoord, this);

		image_pub_ = it_.advertise("/overlay_image/output_video", 1);

		img = cv::imread("/home/khan/phd_ws/face_ws/src/face_detection/images/batman2.jpg",CV_LOAD_IMAGE_COLOR);
		//    cv::Mat srcBGR = cv::Mat(img.size(), CV_8UC3);
		//  cv::cvtColor(img, srcBGR, CV_GRAY2BGR);
		if (img.empty()) {
			std::cout << "Error reading file." << std::endl;
			exit(0);
		}
	//	std::cout<< "input image rows:" << img.rows <<"\t cols:" << img.cols << std::endl;
		cv::namedWindow(OPENCV_WINDOW);
}

	~ImageConverter()
	{
		cv::destroyWindow(OPENCV_WINDOW);
	}
	void getFaceCoord(const std_msgs::Int32MultiArray::ConstPtr& msg)
	{
		//std::cout << "in face coordinates" << msg->data.size() << std::endl;
		//	face_coord[0] = msg->data[6];
		//	face_coord[1] = msg->data[7];
		//	face_coord[2] = msg->data[8];
		//	face_coord[3] = msg->data[9];

		//std::cout << msg->data[6] <<"|" << msg->data[7] << "|" << msg->data[8] << "|" << msg->data[9] << std::endl;

		if (msg->data.size() < 10)
		{
		//	std::cout << "no face" << std::endl;
		} else
		{
			face_coord.clear();
			int vec_size = (int)msg->data.size();
			for (int i=6; i<vec_size; i+=6)
			{
				face_coord.push_back(msg->data[i]);
				face_coord.push_back(msg->data[i+1]);
				face_coord.push_back(msg->data[i+2]);
				face_coord.push_back(msg->data[i+3]);
				//std::cout << msg->data[i] <<"|" << msg->data[i+1] << "|" << msg->data[i+2] << "|" << msg->data[i+3] << std::endl;
			}
		//	std::cout << "face_coord vector size:" << face_coord.size() << std::endl;
			//std::cout << face_coord[0] <<"|" << face_coord[1] << "|" << face_coord[2] << "|" << face_coord[3] << std::endl;
			// read input image



		}
		//cv::resize(img,img,cv::Size(face_coord[2],face_coord[3]));
	}
	void imageCb(const sensor_msgs::ImageConstPtr& msg)
	{
		cv_bridge::CvImagePtr cv_ptr;
		try
		{
			cv_ptr = cv_bridge::toCvCopy(msg, sensor_msgs::image_encodings::BGR8);
		}
		catch (cv_bridge::Exception& e)
		{
			ROS_ERROR("cv_bridge exception: %s", e.what());
			return;
		}
		int vec_size = (int)face_coord.size();
                std::cout << "No of faces detected:" << (int)vec_size/4 << std::endl;
	//	std::cout << "face_coord vector size2:" << vec_size << std::endl;
		if (vec_size != 0)
		{

			for (int i=0; i<vec_size; i+=4)
			{
				cv::Mat tmp_img = img.clone();
				//std::cout << "resize image to:" << face_coord[i+2] << "," << face_coord[i+3] << std::endl;
			//	std::cout<< "input image rows:" << img.rows <<"\t cols:" << img.cols << std::endl;
				cv::resize(tmp_img,tmp_img,cv::Size(face_coord[i+2],face_coord[i+3]));
				//std::cout << "resize done." << std::endl;
				tmp_img.copyTo(cv_ptr->image(cv::Rect(face_coord[i] ,face_coord[i+1] , face_coord[i+2], face_coord[i+3])));
				//std::cout << "copy done." << std::endl;
			}
		}

		//std::cout<< "video image rows:" << cv_ptr->image.rows <<"\t cols:" << cv_ptr->image.cols << std::endl;
		//std::cout<< "input image rows:" << img.rows <<"\t cols:" << img.cols << std::endl;
		//std::cout<< "input image type:" << img.type() <<"\t video image type:" << cv_ptr->image.type() << std::endl;
		// replace portion of the image with our input image
		//  cv::Rect dstRC = cv::Rect(0, 0, 70, 70);
		//cv_ptr->image(dstRC) = img;

		//std::cout<< "img copied" << std::endl;
		//    cv::Mat dstROI = cv_ptr->image(dstRC);
		//  img.copyTo(dstROI);

		// Draw an example circle on the video stream
		//if (cv_ptr->image.rows > 60 && cv_ptr->image.cols > 60)
		//  cv::circle(cv_ptr->image, cv::Point(50, 50), 10, CV_RGB(255,0,0));

		// Update GUI Window
		//cv::imshow(OPENCV_WINDOW, cv_ptr->image);
		cv::imshow(OPENCV_WINDOW, cv_ptr->image);
		cv::waitKey(3);

		// Output modified video stream
		image_pub_.publish(cv_ptr->toImageMsg());
	}
};

int main(int argc, char** argv)
{
	ros::init(argc, argv, "image_overlay");
	ImageConverter ic;
	ros::spin();
	return 0;
}
